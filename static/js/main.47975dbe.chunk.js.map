{"version":3,"sources":["components/Header/Header.js","components/Header/index.js","components/Form/Form.js","components/Form/index.js","data/actions.js","components/Match/Match.js","components/Match/index.js","components/App/App.js","components/App/index.js","serviceWorker.js","data/initial.js","data/reducer.js","data/store.js","index.js"],"names":["Header","className","src","alt","border","connect","Form","props","state","name","players","errorName","errorLength","handleClick","bind","handleChange","handleSubmit","handleClear","e","this","setState","currentTarget","value","preventDefault","length","handlePlayers","htmlFor","placeholder","onChange","id","type","maxLength","onClick","map","player","index","key","toUpperCase","Component","dispatch","addPlayer","Match","playing","handleReset","App","tournament","Boolean","window","location","hostname","match","initial","matches","assignPlayers","pairs","Math","floor","push","splice","divide","array","i","j","random","shuffle","reducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47975dbe.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Header = () => (\n<>\n<header className='header'>\n    <h1 className='hidden'> Lord of the Pings </h1>\n    \n    <img src=\"https://fontmeme.com/permalink/200926/2575f5be0f48e580570ac8b0c2f2e6ed.png\" alt=\"the-lord-of-the-rings-font\" border=\"0\"/>\n    \n</header>\n<hr></hr>\n\n</>\n)\n\nexport default Header;","import { connect } from 'react-redux';\nimport Header from './Header';\n\n\nconst mapStateToProps = () => ({\n    \n})\n\n\nexport default connect(mapStateToProps)(Header);","import React, { Component } from 'react';\n\n\nclass Form extends Component{\n    constructor(props){\n        super(props);\n\n        // setting the original state\n        this.state= {\n            name: \"\",\n            players: [],\n            errorName: false,\n            errorLength: false,\n            \n        };\n\n        // Binding the event handler so that the name can be deconstructed and 'this' can be used.\n\n        this.handleClick = this.handleClick.bind(this)\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n\n        \n    } \n\n\n    // when a name is typed in name is set to the value being entered. The errors are set to false so they disappear when something new is typed. \n    handleChange(e){\n        this.setState({ \n            name: e.currentTarget.value,\n            errorName: false,\n            errorLength: false,\n        });\n\n    }\n\n\n    // rests name to empty string. creates new version of state and name is added to a new version of players array. \n    handleClick(e){\n        // prevents the page from refreshing \n        e.preventDefault();\n        \n        let { name, players } = this.state;\n        \n        if( name !== \"\"){\n        this.setState({\n            players: [ ...players, name],\n            name: \"\"\n            });\n        }else{\n             this.setState({ errorName: true})\n        }\n    }\n\n\n    //submits names to be matched if the criteria is met\n    handleSubmit(e){\n        e.preventDefault();\n\n        let {players} = this.state;\n\n        if(players.length > 0 && players.length % 2 === 0){\n            this.props.handlePlayers(players);\n        } else {\n            this.setState({ errorLength: true })\n        }\n\n    }\n\n\n\n    handleClear(){\n        this.setState({\n            ...this.state,\n            players: [],\n            \n        })\n    }\n\n\n    render(){\n        let { players, name, errorName, errorLength } = this.state;\n        \n\n        let wrongName = \"You must enter a name!\";\n        let wrongLength = \" You must have an even number of players!\";\n        // let startMessage = \"Welcome! Enter your names and click the ring! Who will be the Lord of the Pings?\"\n\n        return(\n            \n            <div className='container'>\n                <p className='item1'>\n                    {/* error messages will appear if criteria not met */}\n                    { errorName ?  wrongName : errorLength ? wrongLength :  null } \n                </p>\n               \n                <form className=\"item2 card\">\n                    <h2> Add your player</h2>\n                    \n                    <label htmlFor=\"playerName\" ></label>\n                    <input \n                        placeholder=\"Enter a name..\"\n                        onChange={ this.handleChange  } \n                        id=\"playerName\" \n                        type=\"text\" \n                        maxLength=\"30\"\n                        value={ name}\n                \n                    ></input>\n\n                    <button className='btn'\n                        onClick={ this.handleClick }\n                    >\n                    Add\n                    </button>\n            \n                </form>\n           \n\n                {/* maps over player array and shows them as list items  */}\n                <section className='card item3'>\n                    <h2> Fellowship of the Ping </h2>\n                    <ul>{players.map((player, index) => (\n        \n                        <> \n                        <li key={index}>\n                        <p >{ player.toUpperCase()}</p>\n                        </li>\n                        </>\n\n                    ))}\n                    </ul>\n                \n                    <button className='btn' onClick={ this.handleClear }>Clear All</button>   \n                </section>\n            \n                <button className='item4 start-btn btn' onClick= { this.handleSubmit }>One Ping to rule them all... </button>\n            </div>\n       \n        )\n    }\n\n}\n\n\nexport default Form;\n\n ","import { connect } from 'react-redux';\nimport Form from './Form';\nimport { addPlayer } from '../../data/actions';\n\n\nconst mapStateToProps = (state ) => {\n    return{\n    players: state.players,\n    }\n};\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n\n        handlePlayers: (players) => dispatch(addPlayer(players)),\n          \n    }\n\n};\n\n// this comes from inital(and so store) - it is accepted as state is passed as an argument. this is then able to be used as a prop in Form component\n\n// connects to Provider wrapper which holds whole App.\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n\n\n// dont want react component to deal with state as will lose reusability so have this index.js file. wraps form component with another component that has access to the store.","export const addPlayer = ( players ) => {\n    return {\n        type: \"ADDPLAYER\",\n        players: players\n    }\n\n}\n\n\n\n\nexport const reset = () => {\n    return {\n        type: \"RESET\"\n    }\n}\n\n\n\n// action creators that hold the actions (type)","import React, { Component } from \"react\";\n\n\n\n\nclass Match extends Component{\n    constructor(props){\n        super(props);\n\n        this.state={ \n        \n        }\n\n    }\n\n\n\n    render(){\n        let  {playing} = this.props;\n\n        \n        return(\n            <>\n                <h2 className='pong-text'> ...One Pong to bind them! </h2>\n\n                <div className='card match'> \n                    <h2 className=\"match-head\">Battle list</h2> \n\n                    {playing.map((player,index) => (\n                        \n                       \n                    <p className='battle' key={index}>{player[0]} <span>vs</span> {player[1]}</p>\n                    \n                    \n                ))}\n\n                </div>\n                <div className='reset'>\n                <button className='reset-btn' onClick= { this.props.handleReset }>Reset</button>\n                </div>\n            </>\n        )\n    }\n\n\n\n\n}\n\nexport default Match;\n\n// https://github.com/rohanharris/ping-pong-app","import { connect } from 'react-redux';\nimport Match from './Match';\nimport { reset } from \"../../data/actions\"\n\n\nconst mapStateToProps = ( { playing }) => {\n    return{\n       playing: playing,\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        handleReset: () => dispatch(reset())\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Match);","import React from 'react';\n// import { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport '../../App.css';\nimport Header from '../Header';\nimport Form from '../Form';\nimport Match from '../Match';\n\n\nconst App = ({ tournament }) => (\n\n  <>\n  <Header />\n  { !tournament ? <Form /> : <Match />}\n\n  </>\n\n);\n\n\nexport default App;\n","import { connect } from \"react-redux\";\n \nimport App from \"./App\";\n\nconst mapStateToProps = ({ tournament }) => { \n    return {\n        tournament: tournament,\n    }; \n};\n\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nconst initial = {\n    players: [],\n    matches: [],\n   \n    tournament: false,\n \n};\n\n\nexport default initial;","import initial from './initial';\n\nconst addPlayer = (state, {players}) => {\n    \n  return { \n      ...state,\n       players: players,\n\n    };\n}\n\n\n\nconst shuffle = (array) => {\n    // use Fisher-Yates algorithm to shuffle arrays\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n};\n\n\n\n\nconst divide = players => {\n    let pairs = [];\n    let matches = Math.floor(players.length / (players.length / 2));\n\n    while (players.length) {\n        pairs.push(players.splice(0, matches));\n    }\n\n    return pairs;\n};\n\n\n\n\nconst assignPlayers =(state)=> {\n    let players = state.players;\n    let playing = divide(shuffle(players));\n\n    return {\n        ...state,\n        playing: playing,\n    }\n}\n\n\n\n\nconst tournament = (state) => {\n    return {\n        ...state,\n        tournament: true,\n    }\n}\n\n\nconst reset = () => {\n    return{\n        ...initial \n    }\n}\n\n\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADDPLAYER\" : return tournament(assignPlayers(addPlayer(state, action)));\n    \n    case \"RESET\" : return reset(state);\n    default: return state;\n  }\n}\n\n\nexport default reducer;","import { createStore, compose } from 'redux';\nimport persistState from 'redux-localstorage';\n\nimport reducer from './reducer';\nimport initial from './initial';\n\n\n\n// this allows local storage without an API\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n\nconst store = createStore(\n    reducer, \n    initial,\n    composeEnhancers(persistState()),\n\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from './data/store';\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store } > \n      {/* provider uses app as children props */}\n       <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}